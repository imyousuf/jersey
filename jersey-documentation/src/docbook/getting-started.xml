<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    http://glassfish.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY % ents SYSTEM "jersey.ent" >
%ents;
]>

<chapter id="getting-started">
  <title>Getting Started</title>

  <para>This chapter will present how to get started with Jersey using
the embedded Grizzly server. The last section of this chapter
presents a reference to equivalent functionality for getting started
with a Web application.</para>
<para>First, it is necessary to depend on the correct Jersey artifacts
as described in <xref linkend="chapter_deps"/>
</para>
<para>Maven developers require a dependency on

<itemizedlist>
   <listitem>the <ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey&amp;a=jersey-server&amp;v=&version;&amp;e=pom">jersey-server</ulink> module, </listitem>
   <listitem>the <ulink url="http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.pom">grizzly-servlet-webserver</ulink> module </listitem>
   <listitem>and optionally for WADL support if using Java SE 5 the <ulink url="http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-impl-2.1.12.pom">jaxb-impl</ulink> module</listitem>
 </itemizedlist>
 </para>
 <para>
   The following dependencies need to be added to the pom:
<programlisting language="xml">&lt;dependency&gt;
    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
    &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
    &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.sun.grizzly&lt;/groupId&gt;
    &lt;artifactId&gt;grizzly-servlet-webserver&lt;/artifactId&gt;
    &lt;version&gt;1.9.18-i&lt;/version&gt;
&lt;/dependency&gt;</programlisting></para>
<para>
And the following repositories need to be added to the pom:
<programlisting language="xml">&lt;repository&gt;
    &lt;id&gt;maven2-repository.java.net&lt;/id&gt;
    &lt;name&gt;Java.net Repository for Maven&lt;/name&gt;
    &lt;url&gt;http://download.java.net/maven/2/&lt;/url&gt;
    &lt;layout&gt;default&lt;/layout&gt;
&lt;/repository&gt;
&lt;repository&gt;
    &lt;id&gt;maven-repository.java.net&lt;/id&gt;
    &lt;name&gt;Java.net Maven 1 Repository (legacy)&lt;/name&gt;
    &lt;url&gt;http://download.java.net/maven/1&lt;/url&gt;
    &lt;layout&gt;legacy&lt;/layout&gt;
&lt;/repository&gt;</programlisting></para>

    <para>If you want to depend on Jersey snapshot versions the following repository needs to be added to the pom:
    <programlisting language="xml">&lt;repository&gt;
    &lt;id&gt;snapshot-repository.java.net&lt;/id&gt;
    &lt;name&gt;Java.net Snapshot Repository for Maven&lt;/name&gt;
    &lt;url&gt;https://maven.java.net/content/repositories/snapshots/&lt;/url&gt;
    &lt;layout&gt;default&lt;/layout&gt;
&lt;/repository&gt;</programlisting></para> 

<para>
Non-maven developers require:
<itemizedlist>
<listitem><ulink url="http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.jar">grizzly-servlet-webserver.jar</ulink>,</listitem>
<listitem><ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey&amp;a=jersey-server&amp;v=&version;&amp;e=jar">jersey-server.jar</ulink>,</listitem>
<listitem><ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey&amp;a=jersey-core&amp;v=&version;&amp;e=jar">jersey-core.jar</ulink>,</listitem>
<listitem><ulink url="http://download.java.net/maven/2/javax/ws/rs/jsr311-api/&jsr311.version;/jsr311-api-&jsr311.version;.jar">jsr311-api.jar</ulink>,</listitem>
<listitem><ulink url="http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar">asm.jar</ulink></listitem>
</itemizedlist></para>
<para>and optionally for WADL support if using Java SE 5:
<itemizedlist>
<listitem><ulink url="http://download.java.net/maven/1/com.sun.xml.bind/jars/jaxb-impl-2.1.12.jar">jaxb-impl.jar</ulink>,</listitem>
<listitem><ulink url="http://download.java.net/maven/1/javax.xml.bind/jars/jaxb-api-2.1.jar">jaxb-api.jar</ulink>,</listitem>
<listitem><ulink url="http://download.java.net/maven/1/javax.activation/jars/activation-1.1.jar">activation.jar</ulink>,</listitem>
<listitem><ulink url="http://download.java.net/maven/1/javax.xml.stream/jars/stax-api-1.0-2.jar">stax-api.jar</ulink></listitem>
</itemizedlist>
</para>
<para>For Ant
developers the <ulink url="http://maven.apache.org/ant-tasks.html">Ant
Tasks for Maven</ulink> may be used to add the following to the ant
document such that the dependencies do not need to be downloaded
explicitly:</para>
<programlisting language="xml">&lt;artifact:dependencies pathId=&quot;dependency.classpath&quot;&gt;
  &lt;dependency groupId=&quot;com.sun.jersey&quot;
              artifactId=&quot;jersey-server&quot;
              version=&quot;&version;&quot;/&gt;
  &lt;dependency groupId=&quot;com.sun.grizzly&quot;
              artifactId=&quot;grizzly-servlet-webserver&quot;
              version=&quot;1.8.6.4&quot;/&gt;
  &lt;artifact:remoteRepository id=&quot;maven-repository.java.net&quot;
                             url=&quot;http://maven.java.net/&quot; /&gt;
  &lt;artifact:remoteRepository id=&quot;maven1-repository.java.net&quot;
                             url=&quot;http://download.java.net/maven/1&quot;
                             layout=&quot;legacy&quot; /&gt;
&lt;/artifact:dependencies&gt;</programlisting>

<para>
The path id “dependency.classpath” may then be referenced as the
classpath to be used for compiling or executing.</para>
<para>Second, create a new project (using your favourite IDE or just
ant/maven) and add the dependences. (For those who want to skip the
creation of their own project take a look at <xref linkend="getting.started.created"/>
</para>

<section>
<title>Creating a root resource</title>
<para>Create the following Java class in your project:</para>
<programlisting language="java" linenumbering="numbered">    // The Java class will be hosted at the URI path &quot;/helloworld&quot;
    @Path(&quot;/helloworld&quot;)
    public class HelloWorldResource {
    
        // The Java method will process HTTP GET requests
        @GET 
        // The Java method will produce content identified by the MIME Media
        // type &quot;text/plain&quot;
        @Produces(&quot;text/plain&quot;)
        public String getClichedMessage() {
            // Return some cliched textual content
            return &quot;Hello World&quot;;
        }
    }</programlisting><para>
The <literal>HelloWorldResource</literal> class is a very simple Web
resource. The URI path of the resource is &quot;/helloworld&quot;
(line 2), it supports the HTTP GET method (line 6) and produces
cliched textual content (line 12) of the MIME media type &quot;text/plain&quot;
(line 9).</para>
<para>Notice the use of Java annotations to declare the URI path, the
HTTP method and the media type. This is a key feature of JSR 311.</para>
</section>

<section>
<title>Deploying the root resource</title>
<para>The root resource will be deployed using the Grizzly Web
container.</para>
<para>Create the following Java class in your project:</para>
<programlisting language="java" linenumbering="numbered">public class Main {
          
     public static void main(String[] args) throws IOException {
             
         final String baseUri = &quot;http://localhost:9998/&quot;;
         final Map&lt;String, String&gt; initParams = 
	                       new HashMap&lt;String, String&gt;();
 
         initParams.put(&quot;com.sun.jersey.config.property.packages&quot;, 
                 &quot;com.sun.jersey.samples.helloworld.resources&quot;);

        System.out.println(&quot;Starting grizzly...&quot;);
        SelectorThread threadSelector = 
	          GrizzlyWebContainerFactory.create(baseUri, initParams);
        System.out.println(String.format(
          &quot;Jersey app started with WADL available at %sapplication.wadl\n” + 
          “Try out %shelloworld\nHit enter to stop it...&quot;, baseUri, baseUri));
        System.in.read();
        threadSelector.stopEndpoint();
        System.exit(0);
    }    
}</programlisting><para>
The <literal>Main</literal> class deploys the <literal>HelloWorldResource</literal>
using the Grizzly Web container.</para>
<para>Lines 9 to 10 creates an initialization parameter that informs the
Jersey runtime where to search for root resource classes to be
deployed. In this case it assumes the root resource class in the
package <literal>com.sun.jersey.samples.helloworld.resources</literal>
(or in a sub-package of).</para>
<para>Lines 13 to 14 deploys the root resource to the base URI
&quot;<ulink url="http://localhost:9998/">http://localhost:9998/</ulink>&quot;
and returns a Grizzly SelectorThread. The complete URI of the Hello
World root resource is &quot;<ulink url="http://localhost:9998/helloworld">http://localhost:9998/helloworld</ulink>&quot;.</para>
<para>Notice that no deployment descriptors were needed and the root
resource was setup in a few statements of Java code.</para>
</section>

<section>
<title>Testing the root resource</title>
<para>Goto the URI <ulink url="http://localhost:9998/helloworld">http://localhost:9998/helloworld</ulink>
in your favourite browser.</para>
<para>Or, from the command line use <literal>curl</literal>:
<programlisting>&gt; curl http://localhost:9998/helloworld</programlisting>
</para>
</section>

<section id="getting.started.created">
<title>Here's one Paul created earlier</title>
<para>The example code presented above is shipped as the <ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey.samples&amp;a=helloworld&amp;v=&version;&amp;c=project&amp;e=zip">HelloWorld</ulink>
sample in the Java.Net maven repository.</para>
<para>For developers wishing to get started by deploying a Web
application an equivalent sample, as a Web application, is shipped as
the <ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey.samples&amp;a=helloworld-webapp&amp;v=&version;&amp;c=project&amp;e=zip">HelloWorld-WebApp</ulink>
sample.</para>
</section>

</chapter>
